#spring.jpa.properties.jakarta.persistence.schema-generation.create-source=metadata
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-target=create.sql
#spring.jpa.properties.hibernate.hbm2ddl.delimiter=;

spring.datasource.url=jdbc:postgresql://192.168.1.18:5432/dslist
spring.datasource.username=postgres
spring.datasource.password=AxR256396dd

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.hibernate.ddl-auto=update
server.port=3000

### **1. Geração do Schema do Banco de Dados (JPA)**

#Estas propriedades configuram o `Spring Data JPA` para gerar um script SQL com base nas suas entidades (as classes Java que representam tabelas do banco de dados).

# spring.jpa.properties.jakarta.persistence.schema-generation.create-source=metadata`: Define que 
# a fonte para a criação do schema (a estrutura das tabelas) são os metadados das suas classes de 
# entidade (as anotações como `@Entity`, `@Table`, etc.).

#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.action=create`: 
# Especifica que a ação a ser executada é a de **criação**. Isso instrui o Hibernate (a 
# implementação JPA usada pelo Spring) a gerar um script SQL para criar as tabelas.

# spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-target=create.sql`: 
# Indica que o script SQL gerado pela ação acima deve ser salvo em um arquivo chamado `create.sql`. 
# Isso é útil para revisar o SQL que será executado ou para executá-lo manualmente em outro ambiente

#spring.jpa.properties.hibernate.hbm2ddl.delimiter=;`: Define o ponto e vírgula (`;`) como o 
#delimitador para os comandos SQL no script gerado.
